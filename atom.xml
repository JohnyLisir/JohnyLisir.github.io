<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JohnyLisir</title>
  
  <subtitle>JohnyLisir Blogs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://JohnyLisir.github.io/"/>
  <updated>2019-10-21T09:13:52.511Z</updated>
  <id>https://JohnyLisir.github.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于本地服务live-server的使用</title>
    <link href="https://JohnyLisir.github.io/2019/10/21/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1live-server%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://JohnyLisir.github.io/2019/10/21/关于本地服务live-server的使用/</id>
    <published>2019-10-21T08:06:25.177Z</published>
    <updated>2019-10-21T09:13:52.511Z</updated>
    
    <content type="html"><![CDATA[<p>#关于本地服务live-server的使用</p><p>##live-server: 是一款npm工具，可以快速帮我们搭建一个本地服务</p><p>#环境：<br>     Mac + Node</p><ol><li><p>请确保本地有安装Node</p></li><li><p>cd本地根目录下（例如：admin），创建一个文件夹，如 ‘live-server’</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$cd Desktop</span><br><span class="line">$mkdir live-server</span><br></pre></td></tr></table></figure></li><li><p>cd 到刚创建的 live-server文件夹下， 执行 npm init -y ,会在当前路径下产生一个package.json文件，这是一个服务配置文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$cd live-server</span><br><span class="line">$npm init -y</span><br></pre></td></tr></table></figure></li><li><p>修改package.json中的’scripts’, 新增一个 ‘server’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  &quot;name&quot;: &quot;admin&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;gulp&quot;: &quot;^4.0.2&quot;,</span><br><span class="line">    &quot;less&quot;: &quot;^3.9.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;&#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;server&quot;: &quot;live-server ./ --port=8081&quot;  #新增的</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>在cd 到 live-server文件夹下，执行npm run server</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$npm run server</span><br></pre></td></tr></table></figure></li><li><p>将你想被访问的文件都copy到 live-server文件夹下,如 xxxx.txt文件</p></li><li><p>浏览器下刷新 or 访问 ‘<a href="http://127.0.0.1:8081/xxxx.txt&#39;即可访问" target="_blank" rel="noopener">http://127.0.0.1:8081/xxxx.txt&#39;即可访问</a></p></li><li><p>停掉服务, ’Control C‘.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#关于本地服务live-server的使用&lt;/p&gt;
&lt;p&gt;##live-server: 是一款npm工具，可以快速帮我们搭建一个本地服务&lt;/p&gt;
&lt;p&gt;#环境：&lt;br&gt;     Mac + Node&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;请确保本地有安装Node&lt;/p&gt;
&lt;/li
      
    
    </summary>
    
    
      <category term="Web" scheme="https://JohnyLisir.github.io/categories/Web/"/>
    
    
      <category term="Web" scheme="https://JohnyLisir.github.io/tags/Web/"/>
    
      <category term="Server" scheme="https://JohnyLisir.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Blog创建教程</title>
    <link href="https://JohnyLisir.github.io/2019/09/18/blog%E6%95%99%E7%A8%8B/"/>
    <id>https://JohnyLisir.github.io/2019/09/18/blog教程/</id>
    <published>2019-09-18T08:08:36.880Z</published>
    <updated>2019-09-20T03:20:20.736Z</updated>
    
    <content type="html"><![CDATA[<p>#一.本地调试</p><p>####1：启动本地服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo s</span><br></pre></td></tr></table></figure><p>####2: 本地 访问<br>在浏览器中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://localhost:4000</span><br></pre></td></tr></table></figure><p>#二.发布blog到远程github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>#三.文章的基本配置</p><p>每篇文章的基本配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World </span><br><span class="line">cover: http://oxnuwmm3w.bkt.clouddn.com/hello-world.jpeg</span><br><span class="line"># 作者信息，多作者则设置为数组</span><br><span class="line"># 单作者</span><br><span class="line">author: </span><br><span class="line">  nick: BruceYJ</span><br><span class="line">  link: https://www.github.com/BruceYuj</span><br><span class="line"># 多作者</span><br><span class="line">author:</span><br><span class="line">  - nick: BruceYJ</span><br><span class="line">    link: https://www.github.com/BruceYuj</span><br><span class="line">  - nick: minfive</span><br><span class="line">    link: https://www.github.com/Mrminfive</span><br><span class="line"></span><br><span class="line"># 如果文章为转载文章，需要多加文章出处项</span><br><span class="line">editor:</span><br><span class="line">  name: Minfive</span><br><span class="line">  link: https://www.github.com/Mrminfive</span><br><span class="line"></span><br><span class="line"># 首页每篇文章的子标题</span><br><span class="line">subtitle: your subtitle</span><br><span class="line"></span><br><span class="line"># 文章标签</span><br><span class="line">tags: [A, B, C]</span><br><span class="line"></span><br><span class="line"># 文章分类 ,目前我自己试过只能是单个的分类，使用 [iOS, web],会出现分级，且排版显示上不对称。</span><br><span class="line">categories: iOS</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#一.本地调试&lt;/p&gt;
&lt;p&gt;####1：启动本地服务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://JohnyLisir.github.io/categories/Blog/"/>
    
    
      <category term="Blog" scheme="https://JohnyLisir.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>react-native 与原生混合开发教程</title>
    <link href="https://JohnyLisir.github.io/2019/09/04/react-native%20%E4%B8%8E%E5%8E%9F%E7%94%9F%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    <id>https://JohnyLisir.github.io/2019/09/04/react-native 与原生混合开发/</id>
    <published>2019-09-04T06:58:00.897Z</published>
    <updated>2019-09-20T03:13:20.456Z</updated>
    
    <content type="html"><![CDATA[<p>#react-native 与原生混合开发</p><p>##1: 配置开发环境<br>react-native环境配置（mac），请自行百度</p><p>##2: 开发</p><p>#####1.在桌面创建一个目录 rn_project,再创建子目录 /ios, 在ios下创建一个ios工程（注意：/ios目录必须是ios工程的根目录，因为pod中有很多路径是这么引用的）</p><p>####2.: 在/ios 工程下， pod init ,产生一个 podfile文件，在里面写入pod 引用</p><p>eg:<br>下面的pod都是从 react-native init AwesomeProject的工程中的ios-&gt;podfile 拷贝过来的，因为后期的React已经做了目录划分，官网旧的podfile格式已经不能使用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def rn_pods</span><br><span class="line">  # &apos;node_modules&apos;目录一般位于根目录中</span><br><span class="line">  pod &apos;React&apos;, :path =&gt; &apos;../node_modules/react-native/&apos;</span><br><span class="line">  pod &apos;React-Core&apos;, :path =&gt; &apos;../node_modules/react-native/React&apos;</span><br><span class="line">  pod &apos;React-DevSupport&apos;, :path =&gt; &apos;../node_modules/react-native/React&apos;</span><br><span class="line">  pod &apos;React-RCTActionSheet&apos;, :path =&gt; &apos;../node_modules/react-native/Libraries/ActionSheetIOS&apos;</span><br><span class="line">  pod &apos;React-RCTAnimation&apos;, :path =&gt; &apos;../node_modules/react-native/Libraries/NativeAnimation&apos;</span><br><span class="line">  pod &apos;React-RCTBlob&apos;, :path =&gt; &apos;../node_modules/react-native/Libraries/Blob&apos;</span><br><span class="line">  pod &apos;React-RCTImage&apos;, :path =&gt; &apos;../node_modules/react-native/Libraries/Image&apos;</span><br><span class="line">  pod &apos;React-RCTLinking&apos;, :path =&gt; &apos;../node_modules/react-native/Libraries/LinkingIOS&apos;</span><br><span class="line">  pod &apos;React-RCTNetwork&apos;, :path =&gt; &apos;../node_modules/react-native/Libraries/Network&apos;</span><br><span class="line">  pod &apos;React-RCTSettings&apos;, :path =&gt; &apos;../node_modules/react-native/Libraries/Settings&apos;</span><br><span class="line">  pod &apos;React-RCTText&apos;, :path =&gt; &apos;../node_modules/react-native/Libraries/Text&apos;</span><br><span class="line">  pod &apos;React-RCTVibration&apos;, :path =&gt; &apos;../node_modules/react-native/Libraries/Vibration&apos;</span><br><span class="line">  pod &apos;React-RCTWebSocket&apos;, :path =&gt; &apos;../node_modules/react-native/Libraries/WebSocket&apos;</span><br><span class="line"></span><br><span class="line">  pod &apos;React-cxxreact&apos;, :path =&gt; &apos;../node_modules/react-native/ReactCommon/cxxreact&apos;</span><br><span class="line">  pod &apos;React-jsi&apos;, :path =&gt; &apos;../node_modules/react-native/ReactCommon/jsi&apos;</span><br><span class="line">  pod &apos;React-jsiexecutor&apos;, :path =&gt; &apos;../node_modules/react-native/ReactCommon/jsiexecutor&apos;</span><br><span class="line">  pod &apos;React-jsinspector&apos;, :path =&gt; &apos;../node_modules/react-native/ReactCommon/jsinspector&apos;</span><br><span class="line">  pod &apos;yoga&apos;, :path =&gt; &apos;../node_modules/react-native/ReactCommon/yoga&apos;</span><br><span class="line"></span><br><span class="line">  pod &apos;DoubleConversion&apos;, :podspec =&gt; &apos;../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec&apos;</span><br><span class="line">  pod &apos;glog&apos;, :podspec =&gt; &apos;../node_modules/react-native/third-party-podspecs/glog.podspec&apos;</span><br><span class="line">  pod &apos;Folly&apos;, :podspec =&gt; &apos;../node_modules/react-native/third-party-podspecs/Folly.podspec&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target &apos;RN_project&apos; do</span><br><span class="line">  # Comment the next line if you don&apos;t want to use dynamic frameworks</span><br><span class="line">  #  use_frameworks!  #react-native 0.60.4以后暂不支持 use_frameworks!,需要屏蔽，否则编译不过</span><br><span class="line">  pod &apos;AFNetworking&apos;</span><br><span class="line">  # Pods for RN_project</span><br><span class="line">  rn_pods</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>####3. 在rn_project 根目录下创建一个 package.json，这个是react配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;RN_project&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">    &quot;private&quot;: true,</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;start&quot;: &quot;yarn react-native start&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####4.在cd 到 rn_project 根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$yarn add react@16.8.6</span><br><span class="line">$yarn add react-native</span><br></pre></td></tr></table></figure><p>####5. cd到 /ios 目录下，pod install,会将node_modules里面的podspec读取到ios项目中</p><p>  剩下的就跟官方一样了  </p><blockquote><p><a href="https://reactnative.cn/docs/integration-with-existing-apps/" target="_blank" rel="noopener">https://reactnative.cn/docs/integration-with-existing-apps/</a></p></blockquote><p>##注意点: </p><pre><code>1:  #react-native 0.60.4以后暂不支持 use_frameworks!,需要屏蔽，否则编译不过, podfile需要屏蔽 --&gt; #  use_frameworks!FAQ: https://stackoverflow.com/questions/57152569/double-conversion-double-conversion-h-file-not-found2: 在模拟器中，原生调用rn模块时的url，可以采用 localhost，但是一旦连接的是真机调试，则url中的localhost必须改为你的Mac电脑的ip，否则无法正常调试3: 关于封包时的脚本FAQ: https://www.jianshu.com/p/5f662d3c87fa</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#react-native 与原生混合开发&lt;/p&gt;
&lt;p&gt;##1: 配置开发环境&lt;br&gt;react-native环境配置（mac），请自行百度&lt;/p&gt;
&lt;p&gt;##2: 开发&lt;/p&gt;
&lt;p&gt;#####1.在桌面创建一个目录 rn_project,再创建子目录 /ios, 在i
      
    
    </summary>
    
    
      <category term="React-native" scheme="https://JohnyLisir.github.io/categories/React-native/"/>
    
    
      <category term="iOS" scheme="https://JohnyLisir.github.io/tags/iOS/"/>
    
      <category term="React" scheme="https://JohnyLisir.github.io/tags/React/"/>
    
      <category term="React-native" scheme="https://JohnyLisir.github.io/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>Git操作-ssh key配置相关</title>
    <link href="https://JohnyLisir.github.io/2019/08/10/gitlab%20ssh%20key%20%E9%85%8D%E7%BD%AE/"/>
    <id>https://JohnyLisir.github.io/2019/08/10/gitlab ssh key 配置/</id>
    <published>2019-08-10T10:05:25.104Z</published>
    <updated>2019-09-20T03:12:50.755Z</updated>
    
    <content type="html"><![CDATA[<p>#gitlab ssh key 配置</p><p>###1: 查看本地是否已经存在 SSH Key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ls -al ~/.ssh</span><br></pre></td></tr></table></figure><p>###2: 对于已经存在的直接去拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>###3: 对于本地没有，或者需要覆盖的（tips: Overwrite (y/n)?  y）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#gitlab ssh key 配置&lt;/p&gt;
&lt;p&gt;###1: 查看本地是否已经存在 SSH Key&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="Git" scheme="https://JohnyLisir.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://JohnyLisir.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git操作-.gitignore相关</title>
    <link href="https://JohnyLisir.github.io/2019/06/16/git%E6%93%8D%E4%BD%9C-%E6%8C%BD%E6%95%91gitignore/"/>
    <id>https://JohnyLisir.github.io/2019/06/16/git操作-挽救gitignore/</id>
    <published>2019-06-16T02:44:29.000Z</published>
    <updated>2019-09-20T03:12:43.340Z</updated>
    
    <content type="html"><![CDATA[<p>##对于那种已经提交到gitlab上的工程，前期 .gitignore 没配置好，导致部分该忽略的文件没忽略，这里给出急救教程！！！</p><h4 id="1：在master分支下"><a href="#1：在master分支下" class="headerlink" title="1：在master分支下"></a>1：在master分支下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">确保最新代码，且本地没有任何改动及需要提交的</span><br></pre></td></tr></table></figure><h4 id="2：git-pull-操作"><a href="#2：git-pull-操作" class="headerlink" title="2：git pull 操作"></a>2：git pull 操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">再次确保代码最新</span><br></pre></td></tr></table></figure><h4 id="3：git-rm-r-–cached"><a href="#3：git-rm-r-–cached" class="headerlink" title="3：git rm -r –cached ."></a>3：git rm -r –cached .</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">清除本地项目目录下缓存</span><br></pre></td></tr></table></figure><h4 id="4-新建or修改-gitignore-，编辑好"><a href="#4-新建or修改-gitignore-，编辑好" class="headerlink" title="4: 新建or修改 .gitignore ，编辑好"></a>4: 新建or修改 .gitignore ，编辑好</h4><h4 id="5-git-add"><a href="#5-git-add" class="headerlink" title="5: git add ."></a>5: git add .</h4><h4 id="6-git-commit-m-“add-gitignore”"><a href="#6-git-commit-m-“add-gitignore”" class="headerlink" title="6: git commit -m “add .gitignore”"></a>6: git commit -m “add .gitignore”</h4><h4 id="7-git-push"><a href="#7-git-push" class="headerlink" title="7: git push"></a>7: git push</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##对于那种已经提交到gitlab上的工程，前期 .gitignore 没配置好，导致部分该忽略的文件没忽略，这里给出急救教程！！！&lt;/p&gt;
&lt;h4 id=&quot;1：在master分支下&quot;&gt;&lt;a href=&quot;#1：在master分支下&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="Git" scheme="https://JohnyLisir.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://JohnyLisir.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Mac通过adb安装apk的教程</title>
    <link href="https://JohnyLisir.github.io/2019/06/16/Mac%E9%80%9A%E8%BF%87adb%E5%AE%89%E8%A3%85apk%E7%9A%84%E6%95%99%E7%A8%8B/"/>
    <id>https://JohnyLisir.github.io/2019/06/16/Mac通过adb安装apk的教程/</id>
    <published>2019-06-16T02:44:29.000Z</published>
    <updated>2019-09-20T03:13:04.674Z</updated>
    
    <content type="html"><![CDATA[<p>#Mac通过adb安装apk的教程<br>(关于mac 环境 通过adb 给安卓机（安卓系统）安装apk的教程)</p><p>#1: 环境篇</p><p>###1.1 mac上必须 安装 java 环境</p><p>可使用以下命令，查看是否安装该环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure><p>如果没有，请自行下载安装java环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#下载地址</span><br><span class="line"></span><br><span class="line">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</span><br></pre></td></tr></table></figure><p>###1.2 mac 安装 andorid sdk<br>通过以下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install android-sdk</span><br></pre></td></tr></table></figure><p>###1.3 mac 安装 android-platform-tools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install android-platform-tools</span><br><span class="line"></span><br><span class="line">#检测adb是否安装成功</span><br><span class="line">$ adb devices    //如果成功了，会出现设备列表</span><br></pre></td></tr></table></figure><p>#2: 安装篇</p><p>###2.1 方式1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ adb install &lt;apk-path&gt;</span><br><span class="line"></span><br><span class="line">#例如</span><br><span class="line">$ adb install xx/xxx/xx.apk</span><br></pre></td></tr></table></figure><p>###2.2 方式2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &lt;apk-path&gt;</span><br><span class="line">$ adb install xxx.apk</span><br></pre></td></tr></table></figure><p>#3: 卸载篇<br>在有的时候我们安装新包，需要先卸载旧的包，不然会提示安装失败</p><p>###3.1卸载apk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ adb uninstall &lt;apk包名&gt;</span><br><span class="line">eg:</span><br><span class="line">$ adb uninstall cn.gowild.voiceserver.xera</span><br><span class="line"></span><br><span class="line">---如果不清楚具体包名，可通过以下方式去查看</span><br></pre></td></tr></table></figure><p>###3.2 查看已经安装的旧包的包名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">步骤如下:</span><br><span class="line">3.2.1</span><br><span class="line">$ adb shell</span><br><span class="line">$ cd data</span><br><span class="line">$ ls</span><br><span class="line">//如果此时出现 opendir failed, Permission denied,可以继续输入</span><br><span class="line">$ zhcsu ls //此时可以正常显示data目录下的内容了,如果此时没看到包名相关的文件，继续 cd data</span><br><span class="line">$ cd data</span><br><span class="line">$ ls //此时可以看到很多包文件，包括系统的包、以及第三方的包</span><br><span class="line"></span><br><span class="line">我们的包名是</span><br><span class="line">cn.gowild.xxxx</span><br><span class="line"></span><br><span class="line">找到具体包名后，继续走卸载流程，然后再重新安装，安装成功会出现 &apos;success&apos;提示，此时就大功告成了😆</span><br></pre></td></tr></table></figure><p>#4: 问题篇<br>在安装过程中出现 “ INSTALL_FAILED_ALREADY_EXISTS “ , 意思是设备上已经安装了该apk，不能重复安装，此时我们需要先卸载旧的包，然后重新安装</p><p>###4.1 卸载apk</p><pre><code>$ adb uninstall &lt;apk包名&gt;eg:$ adb uninstall cn.gowild.voiceserver.xera</code></pre><p>###4.2 卸载完后，然后再重新安装</p><pre><code>请参考 安装篇安装成功会出现 &apos;success&apos;提示，此时就大功告成了😆</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Mac通过adb安装apk的教程&lt;br&gt;(关于mac 环境 通过adb 给安卓机（安卓系统）安装apk的教程)&lt;/p&gt;
&lt;p&gt;#1: 环境篇&lt;/p&gt;
&lt;p&gt;###1.1 mac上必须 安装 java 环境&lt;/p&gt;
&lt;p&gt;可使用以下命令，查看是否安装该环境&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
    
      <category term="APK" scheme="https://JohnyLisir.github.io/categories/APK/"/>
    
    
      <category term="APK" scheme="https://JohnyLisir.github.io/tags/APK/"/>
    
  </entry>
  
  <entry>
    <title>Cocoapods私有库使用-进阶之二进制</title>
    <link href="https://JohnyLisir.github.io/2019/06/16/Cocoapods%E7%A7%81%E6%9C%89%E5%BA%93%E4%BD%BF%E7%94%A8-%E8%BF%9B%E9%98%B6%E4%B9%8B%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    <id>https://JohnyLisir.github.io/2019/06/16/Cocoapods私有库使用-进阶之二进制/</id>
    <published>2019-06-16T02:44:29.000Z</published>
    <updated>2019-09-20T03:12:22.983Z</updated>
    
    <content type="html"><![CDATA[<p>#Cocoapods私有库使用-进阶之二进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">参考：</span><br><span class="line">//Pod二进制化</span><br><span class="line">https://www.zybuluo.com/qidiandasheng/note/595740#%E6%BA%90%E7%A0%81%E5%92%8C%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%88%87%E6%8D%A2</span><br><span class="line">//iOS里的导入头文件</span><br><span class="line">https://www.zybuluo.com/qidiandasheng/note/602118</span><br><span class="line"></span><br><span class="line">说明：已经制作好的私有pod，每次pod install 下来都是源码，这在第一次编译时会大大增加编译时间，如果我们预先将对应的版本的pod源码制作成framework，一起提供给pod，当我们使用</span><br><span class="line">use_lib=1 pod install 时，切换成framework引入而不是源码引入，这样在编译的时候将大大提高编译速度，体验更好。（缺点：不能进行源码端点调试）</span><br></pre></td></tr></table></figure><p>##1: 使用cocoapods-packager 将我们的源码制作成framework</p><p>当然，这里其实也可以制作程 .a 文件，随你选择，因为我们项目使用了oc与swift混编，podfile中使用了 ‘use_frameworks!’,所以这里就选择制作成framework<br>详细的命令使用说明: <a href="https://www.zybuluo.com/qidiandasheng/note/595740#%E6%BA%90%E7%A0%81%E5%92%8C%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%88%87%E6%8D%A2" target="_blank" rel="noopener">https://www.zybuluo.com/qidiandasheng/note/595740#%E6%BA%90%E7%A0%81%E5%92%8C%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%88%87%E6%8D%A2</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.1 使用cocoapods-packager,以 &apos;GWNetworkFramework.podspec&apos;为例</span><br><span class="line"></span><br><span class="line">cd 到我们pod项目的根目录下（包含 .podspec文件），执行:</span><br><span class="line"></span><br><span class="line">$pod package GWNetworkFramework.podspec --force --embedded --no-mangle --exclude-deps  --spec-sources=http://gitlab.gowild.top/app/Eve_App_iOS_spec.git,https://github.com/CocoaPods/Specs.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.2 执行此命令后，会在根目录下生成一个以podName-&#123;version&#125;命名的的文件夹,找到ios-&gt;xxxxframework 目录下，可以看到生成好的  xxx.framework,</span><br><span class="line">这里我们可以查看一下这个framework是否正常，比如暴露出来的头文件跟源码暴露出来的头文件，是不是一致，有没有缺少关键头文件 podName.h 文件（这个文件我们一般做整体头文件配置的，很关键哦）</span><br><span class="line"></span><br><span class="line">1.3 在根目录下新建文件夹 Frameworks-&gt;version(对应版本号,比如0.1.4), 将我们刚刚利用对应version生成的framework，copy到frameworks-&gt;version的目录下</span><br><span class="line"></span><br><span class="line">1.4 在pod项目中测试 二进制与源码的切换</span><br><span class="line">删除podDemo项目中的Pods文件夹（因为之前已经使用pod install，安装了源码版本的）</span><br><span class="line"></span><br><span class="line">$pod package GWLogFramework.podspec --force --embedded --no-mangle --exclude-deps  --spec-sources=http://gitlab.gowild.top/app/Eve_App_iOS_spec.git,https://github.com/CocoaPods/Specs.git</span><br><span class="line">$pod repo push gowild-app-eve_app_ios_spec  GWLogFramework.podspec --allow-warnings --use-libraries --sources=&apos;http://gitlab.gowild.top/app/Eve_App_iOS_spec.git,https://github.com/CocoaPods/Specs.git&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Cocoapods私有库使用-进阶之二进制&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://JohnyLisir.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://JohnyLisir.github.io/tags/iOS/"/>
    
      <category term="Cocoapods" scheme="https://JohnyLisir.github.io/tags/Cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>iOS设备 获取 udid 方法</title>
    <link href="https://JohnyLisir.github.io/2019/06/16/ios%E8%AE%BE%E5%A4%87%20%E8%8E%B7%E5%8F%96%20udid%20%E6%96%B9%E6%B3%95/"/>
    <id>https://JohnyLisir.github.io/2019/06/16/ios设备 获取 udid 方法/</id>
    <published>2019-06-16T02:44:29.000Z</published>
    <updated>2019-09-20T03:14:07.764Z</updated>
    
    <content type="html"><![CDATA[<p>#ios设备 获取 udid 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1：使用iphone自带浏览器 safari访问</span><br><span class="line">    https://www.pgyer.com/udid</span><br><span class="line">    点击获取UDID按钮，弹窗后，点击允许</span><br><span class="line"></span><br><span class="line">2: 前往手机的 设置-&gt;通用-&gt;描述文件与设备管理, 点击 “蒲公英(PGYER)”, 点击右上角安装，并输入密码以完成安装。</span><br><span class="line"></span><br><span class="line">3：安装过程完成会自动跳回 Safari浏览器 ，可以看到设备信息UDID:</span><br><span class="line">4：长按UDID串儿，拷贝</span><br><span class="line">5：将copy的UDID发送给ios开发人员,并附上自己设备的名称，用作区分</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#ios设备 获取 udid 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://JohnyLisir.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://JohnyLisir.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Python代码编译成Mac软件教程</title>
    <link href="https://JohnyLisir.github.io/2019/06/16/python%20%E4%BB%A3%E7%A0%81%20%E7%BC%96%E8%AF%91%E6%88%90%20mac%20%E8%BD%AF%E4%BB%B6/"/>
    <id>https://JohnyLisir.github.io/2019/06/16/python 代码 编译成 mac 软件/</id>
    <published>2019-06-16T02:44:29.000Z</published>
    <updated>2019-09-20T03:13:12.637Z</updated>
    
    <content type="html"><![CDATA[<p>#Python代码编译成Mac软件</p><p>###1. Mac环境下安装 ‘py2app’<br>    pip3 install py2app</p><p>###2. 在桌面新建一个文件夹 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg: pyApp，将你的可执行的py脚本复制到pyApp 目录</span><br></pre></td></tr></table></figure><p>###3. 进入新建文件夹下<br>    cd pyApp<br>    py2applet –make-setup xxxx.py</p><p>###4. 执行上面的命令，会产生 setup.py 文件</p><p>###5. 继续执行<br>    python3 setup.py py2app</p><p>###6. 会在当前文件夹下，生成 dist、build 文件夹<br>    可运行的mac程序，就在dist 目录下</p><p>###7. 双击即可运行该软件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Python代码编译成Mac软件&lt;/p&gt;
&lt;p&gt;###1. Mac环境下安装 ‘py2app’&lt;br&gt;    pip3 install py2app&lt;/p&gt;
&lt;p&gt;###2. 在桌面新建一个文件夹 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://JohnyLisir.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://JohnyLisir.github.io/tags/Python/"/>
    
      <category term="Mac-app" scheme="https://JohnyLisir.github.io/tags/Mac-app/"/>
    
  </entry>
  
  <entry>
    <title>APP与H5的交互规范</title>
    <link href="https://JohnyLisir.github.io/2019/06/16/APP%E4%B8%8Eh5%E5%90%8C%E4%B8%80%E8%B0%83%E7%94%A8%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E/"/>
    <id>https://JohnyLisir.github.io/2019/06/16/APP与h5同一调用规则说明/</id>
    <published>2019-06-16T02:44:29.000Z</published>
    <updated>2019-09-20T03:12:02.655Z</updated>
    
    <content type="html"><![CDATA[<p>#为了规范化 APP与H5调用通道，采用此类型声明</p><p>APP与H5的交互，采用APP端、H5端各注册一个方法，给彼此调用，具体业务类型则在调用参数里做区分</p><p>##（1）APP端提供方法:<br>  方法名：jsCallNative<br>  参数：param<br>   param = {<br>        code: 1001,<br>        data: 传递的方法参数<br>    }</p><pre><code>例如： js需要调起nativa方法（以ios为例,使用了WebViewJavascriptBridge框架）1-1：native端注册方法 jsCallNative  (以ios为例)//原生不提供返回值的注册[self.bridge registerHandler:@&quot;jsCallNative&quot; handler:^(id data, WVJBResponseCallback responseCallback) {    NSLog(@&quot;Log: %@&quot;, data);}];//2:原生提供返回值的注册[self.bridge registerHandler:@&quot;jsCallNative&quot; handler:^(id data, WVJBResponseCallback responseCallback) {    responseCallback([NSNumber numberWithInt:[UIScreen mainScreen].bounds.size.height]);}];js端代码param = {    code = 1001,    data = {        title: &apos;双十一活动分享&apos;,        image: &apos;url&apos;,        sharePlatfrom: &apos;QQ&apos;,        ...    }}//1：不需要返回值bridge.callHandler(&quot;jsCallNative&quot;, param)//2：需要原生提供返回值(response为 nativa的返回值)bridge.callHandler(&quot;jsCallNative&quot;, param, function(response) {    alert(&apos;Screen height:&apos; + response)})</code></pre><p>##（2）js端提供的方法:<br>    方法名: nativeCallJs<br>    参数：param<br>    param = {<br>        code: 1001,<br>        data: 传递的方法参数<br>    }</p><pre><code>例如: nativa需要调用js的方法2-1: h5端注册方法nativeCallJs//不给原生提供返回值bridge.registerHandler(&quot;nativeCallJs&quot;, function(data) { alert(data) })//给原生提供返回值bridge.registerHandler(&quot;nativeCallJs&quot;, function(data, responseCallback) {    responseCallback(document.location.toString())})2-2: native端调用(以ios为例)//没有返回值[self.bridge callHandler:@&quot;nativeCallJs&quot; data:param];//有返回值(responseData)[self.bridge callHandler:@&quot;getCurrentPageUrl&quot; data:param responseCallback:^(id responseData) {    NSLog(@&quot;Current UIWebView page URL is: %@&quot;, responseData);}];</code></pre><p>##(3): 本次分享模块方法类型定义</p><pre><code>app分享到QQcode: 1001 分享param:</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#为了规范化 APP与H5调用通道，采用此类型声明&lt;/p&gt;
&lt;p&gt;APP与H5的交互，采用APP端、H5端各注册一个方法，给彼此调用，具体业务类型则在调用参数里做区分&lt;/p&gt;
&lt;p&gt;##（1）APP端提供方法:&lt;br&gt;  方法名：jsCallNative&lt;br&gt;  参数：p
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://JohnyLisir.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://JohnyLisir.github.io/tags/iOS/"/>
    
      <category term="Web" scheme="https://JohnyLisir.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Git操作-tag相关</title>
    <link href="https://JohnyLisir.github.io/2019/06/16/git-tag-commonds/"/>
    <id>https://JohnyLisir.github.io/2019/06/16/git-tag-commonds/</id>
    <published>2019-06-16T02:44:29.000Z</published>
    <updated>2019-09-20T03:12:37.120Z</updated>
    
    <content type="html"><![CDATA[<p>#关于git的tag操作</p><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br></pre></td></tr></table></figure><p>##1：新增<br>命令行输入<strong>git tag <name></name></strong>就可以打一个新标签：</p><pre><code>$git tag &lt;tagname&gt;</code></pre><p>##2：查看</p><pre><code>//查看所有(本地)$git tag或者$git show &lt;tagname&gt;或者$git tag -l//查看所有（远程）$git ls-remote --tags origin</code></pre><p>##3：将tag打到指定的commit记录上(比如之前的某次提交忘了打tag啊)</p><pre><code>$git tag 0.1.1 &lt;commitId&gt;</code></pre><p>##4：打上带有说明的tag [optional]可选的</p><pre><code>$git tag -a 0.1.1 -m &quot;我是本次tag的相关说明&quot;   &lt;commitId&gt;[optional]</code></pre><p>##5: 删除 tag（本地删除，比如你打错tag了）</p><pre><code>$git tag -d &lt;tagname&gt;推送tag到远程$git push origin &lt;tagname&gt;或者$git push --tags</code></pre><p>##6: 删除tag (远程删除)</p><pre><code>//先从本地删除$git tag -d &lt;tagname&gt;//再从远程删除$git push origin :refs/tags/&lt;tagname&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#关于git的tag操作&lt;/p&gt;
&lt;p&gt;在Git中打标签非常简单，首先，切换到需要打标签的分支上：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="Git" scheme="https://JohnyLisir.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://JohnyLisir.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>基于Python 搭建App服务器（Tornado）</title>
    <link href="https://JohnyLisir.github.io/2019/06/16/%E5%9F%BA%E4%BA%8EPython%20%E6%90%AD%E5%BB%BAApp%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88Tornado)/"/>
    <id>https://JohnyLisir.github.io/2019/06/16/基于Python 搭建App服务器（Tornado)/</id>
    <published>2019-06-16T02:44:29.000Z</published>
    <updated>2019-09-20T03:11:44.931Z</updated>
    
    <content type="html"><![CDATA[<p>#基于Python 搭建App服务器（Tornado）</p><p><strong>说明</strong>：该教程基于CentOS<strong>7.2 64</strong>位</p><p>##(1):环境配置(基于CentOS操作系统)</p><p>CentOS 7.2 操作系统自带的 Python 版本为 2.7.5，本小册将以 Python 3.6.2 的版本进行讲解。即安装完 Python 3.6.2 后，系统上同时存在 Python 2.7.5 和 Python 3.6.2 两个版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1：安装依赖包</span><br><span class="line"></span><br><span class="line">$yum -y groupinstall &quot;Development tools&quot;</span><br><span class="line"></span><br><span class="line">$yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line"></span><br><span class="line">2: 下载Python 3.6.2</span><br><span class="line"></span><br><span class="line">$wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz</span><br><span class="line">(注意：)如果提示 wget 命令无法找到，请先执行 yum -y install wget ,进行安装</span><br><span class="line"></span><br><span class="line">3: 创建安装目录</span><br><span class="line">$mkdir /usr/local/python3</span><br><span class="line"></span><br><span class="line">4: 安装gcc</span><br><span class="line">由于 Python 3.6.2 的编译需要编译环境，故需安装 gcc。</span><br><span class="line"></span><br><span class="line">$yum -y install gcc</span><br><span class="line"></span><br><span class="line">5: 安装Python3.6.2</span><br><span class="line">解压 Python 3.6.2 并安装在 /usr/local/python3 目录下。</span><br><span class="line"></span><br><span class="line">$tar -xvJf  Python-3.6.2.tar.xz</span><br><span class="line">$cd Python-3.6.2</span><br><span class="line">$./configure --prefix=/usr/local/python3</span><br><span class="line">$make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">6：创建软连</span><br><span class="line"></span><br><span class="line">$ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br><span class="line">$ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br><span class="line"></span><br><span class="line">7: 测试 python3</span><br><span class="line"></span><br><span class="line">$python3 --version</span><br></pre></td></tr></table></figure><p>##(2): 安装Tornado<br>CentOS 下还无法直接使用 yum install tornado，但可以使用 pip 安装 Tornado。先执行 pip3 install –upgrade pip 命令升级 pip，再执行 pip3 install tornado 命令安装 Tornado。</p><p>测试Tornado 安装是否成功:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$python3</span><br><span class="line">$import tornado</span><br></pre></td></tr></table></figure><p>##(3): 安装MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$yum install mysql-devel</span><br><span class="line">$wget http://dev.mysql.com/get/mysql-community-$release-el7-5.noarch.rpm</span><br><span class="line">$rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">$yum -y install mysql-community-server</span><br><span class="line">$pip3 install mysqlclient</span><br><span class="line">$service mysqld restart</span><br><span class="line"></span><br><span class="line">#测试 MySQL 是否安装成功</span><br><span class="line">$systemctl status mysqld.service</span><br></pre></td></tr></table></figure><p>##(4): 安装 SQLAlchemy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$pip3 install SQLAlchemy</span><br><span class="line"></span><br><span class="line">#测试 SQLAlchemy 是否安装成功</span><br><span class="line">$python3</span><br><span class="line">$import sqlalchemy</span><br></pre></td></tr></table></figure><p>##(5): 代码编辑器<br>mac 上推荐使用 VSCode ，搭配ftp 插件使用</p><p>##(6): 创建 服务器工程 目录 demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在root 根目录下,</span><br><span class="line">$cd /data (没有data目录的话, cd / ,mkdir data,然后 cd ~,再cd /data)</span><br><span class="line">#创建 demo文件夹</span><br><span class="line">$mkdir demo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#基于Python 搭建App服务器（Tornado）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：该教程基于CentOS&lt;strong&gt;7.2 64&lt;/strong&gt;位&lt;/p&gt;
&lt;p&gt;##(1):环境配置(基于CentOS操作系统)&lt;/p&gt;
&lt;p&gt;CentOS 
      
    
    </summary>
    
    
      <category term="Python" scheme="https://JohnyLisir.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://JohnyLisir.github.io/tags/Python/"/>
    
      <category term="Server" scheme="https://JohnyLisir.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Cocoapods私有库-制作教程</title>
    <link href="https://JohnyLisir.github.io/2019/06/16/cocoapods%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/"/>
    <id>https://JohnyLisir.github.io/2019/06/16/cocoapods制作教程/</id>
    <published>2019-06-16T02:44:29.000Z</published>
    <updated>2019-09-20T03:12:30.817Z</updated>
    
    <content type="html"><![CDATA[<p>#Cocoapods 私有库方案说明:<br>    为了使我们的项目更好的管理、模块更好的复用与维护，<br>    经过研究决定采用 模块化配合Cocoapods的方案，以实现目的.</p><p>##注意：<br>我们gowild-pod仓库 名字： gowild-app-eve_app_ios_spec<br>完整的pod推送命令(以网络库的push为例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pod repo push gowild-app-eve_app_ios_spec GWNetworkFramework.podspec --allow-warnings --use-libraries --sources=&apos;http://gitlab.gowild.top/app/Eve_App_iOS_spec.git,https://github.com/CocoaPods/Specs.git&apos;</span><br><span class="line"></span><br><span class="line">pod repo push gowild-app-eve_app_ios_spec GWUFileFramework.podspec --allow-warnings --use-libraries --sources=&apos;http://gitlab.gowild.top/app/Eve_App_iOS_spec.git,https://github.com/CocoaPods/Specs.git&apos;</span><br><span class="line"></span><br><span class="line">pod repo push gowild-app-eve_app_ios_spec GWRouterKit.podspec --allow-warnings --use-libraries --sources=&apos;http://gitlab.gowild.top/app/Eve_App_iOS_spec.git,https://github.com/CocoaPods/Specs.git&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对应的lint</span><br><span class="line">pod lib lint --allow-warnings --use-libraries --sources=&apos;http://gitlab.gowild.top/app/Eve_App_iOS_spec.git,https://github.com/CocoaPods/Specs.git&apos;</span><br></pre></td></tr></table></figure><p>###(1)需要实现的步骤: (pod lib lint -&gt; git push -&gt; git add tag and push -&gt; pod repo push)<br>        1: 在自己的git服务器创建属于自己的cocoapods 仓库项目（仓库名如: GWSpec）<br>        2: 在本地命令行执行 pod repo add &lt;#仓库名#&gt;  &lt;#仓库项目的git地址#&gt;<br>         如：pod repo add  GWSpec  https:/gitlab.gowild.top/GWSpec.git<br>         执行完该命令后，你可以去本地 ~/.cocoapods/repo/ 目录下，会发现新增了一个与master同级名为GWSpec 的文件夹， master 是cocoapods官方库在本地的文件目录，而 GWSpec 则是我们自己搭建的私有化pods 仓库目录<br>        3: 在自己的git服务器创建 pod项目，如 podTestLibrary,<br>        4: 在本地创建一个pods_space的目录，命令行下 cd 到该目录下，执行命令<br>          pod lib create podTestLibrary 的到一个xcode项目,目录结构如：<br>          PodTestLibrary<br>            ├── Example                                  #demo APP<br>            │   ├── PodTestLibrary<br>            │   ├── PodTestLibrary.xcodeproj<br>            │   ├── PodTestLibrary.xcworkspace<br>            │   ├── Podfile                              #demo APP 的依赖描述文件<br>            │   ├── Podfile.lock<br>            │   ├── Pods                                  #demo APP 的依赖文件<br>            │   └── Tests<br>            ├── LICENSE                               #开源协议 默认MIT<br>            ├── Pod                                       #组件的目录<br>            │   ├── Assets                            #资源文件<br>            │   └── Classes                              #类文件<br>            ├── PodTestLibrary.podspec           #第三步要创建的podspec文件<br>            └── README.md</p><pre><code>5：将自己要封装的源码加入到Classes 文件夹下， 然后配置好 Podspec Metadata 下的 xxx.podspec 文件 (注：别忘了将pod测试项目的依赖版本号改为与 .podspec 文件中的一样，这点很重要哦)6: 命令行下cd Example ，执行pod update7: 重新打开Example 里的 xxx.xcworkspace 文件，在import 封装的某个头文件编译一下，通过就完成了第一步咯8：命令行，在pod项目根目录下 执行 pod lib lint ，只是检查自建的pod项目，各个配置是否副歌规范。如果有错误，根据错误提示修改；如果没错执行下一步    注:如果想忽略警告 pod lib lint --allow-warnings    eg: pod lib lint --allow-warnings --use-libraries --sources=&apos;http://gitlab.gowild.top/app/Eve_App_iOS_spec.git,https://github.com/CocoaPods/Specs.git&apos;9: 命令行执行 pod spec lint ,只是检查自建的pod项目能否在cocoapods体系中使用，因为目前还没推送上去，也没将私有pod项目推送到私有pod仓库，此时肯定会报错啦。请继续执行下一步10: 将本地pod项目 push到远程git服务器(并对git 打上对应版本的tag，推送上去)， 然后命令行  执行 pod repo push GWSpec podTestLibrary.podspec ,将pod项目的索引加入自建的私有pod仓库中, 注: 如果因为警告（错误的话自己解决^_^）,可以采用命令    pod repo push GWSpec podTestLibrary.podspec --allow-warnings11：此时在本地新建一个项目，按照(2)去使用我们自己的私有pod关于pod迭代:1: 确保迭代新增的代码可运行，没有错误2: (别忘了)将 xx.podspec 文件中 version 递增一个版本，比如改为 0.2.03: 将要提交的代码push到私有git服务器4: 打上tag （如第一次的tag = podspec.vresion = 0.1.0）    这次，执行 git tag 0.2.0 ,再执行 git push --tags 5: 执行 pod repo push GWSpec podTestLibrary.podspec, 再次将新version推送到私有pod仓库中6: 此时 pod search podTestLibrary,会看到新增的version， Versions: 0.2.0, 0.1.0 【GWSpec】7: 使用新版本的pod， 在命令执行 pod update</code></pre><p>###(2)关于私有pod 的使用<br>    1: 在新建项目里的 podfile文件中开头出添加<br>       source ‘<a href="https://gitlab.gowild.top/GWSpec.git&#39;" target="_blank" rel="noopener">https://gitlab.gowild.top/GWSpec.git&#39;</a><br>       source ‘<a href="https://github.com/Cocoapods/Specs.git&#39;" target="_blank" rel="noopener">https://github.com/Cocoapods/Specs.git&#39;</a></p><pre><code>作用: 第一句是将我们自己的私有pod 仓库引入到Cocoapods的体系中，这样执行 pod install 才能搜到我们自己的私有pod，但是加了第一句之后，官方的pod就搜索不到了，比如此时你引用了 &apos;AFNetworking&apos;，pod install 就会提示搜索不到，此时就要加入第二句了</code></pre><p>###(3)关于 pod install 与 pod update 分别在什么时候使用<br>     1: 执行 pod install ，会生成podfile.lock ,同时他只会补充podfile中有 项目中没有的pod工程，已经存在的他不会更新，即使有新版本了，也不会给你升级<br>     2：执行 pod update ，原来没有的pod工程，他会给你安装最新版的，原来有的，他会给你升级到最新版</p><p>###(4)关于pod项目push到git服务器<br>    git add .<br>    git commit -m “Initial Commit of Library”<br>    #添加远端仓库<br>    git remote add origin <a href="https://git.oschina.net/wuhongxing/PrivateRepo.git" target="_blank" rel="noopener">https://git.oschina.net/wuhongxing/PrivateRepo.git</a><br>    #推送到远端仓库<br>    git push origin master</p><p>###(5)关于pod项目打tag,push到git服务器</p><pre><code>添加taggit tag 0.1.0 -m &quot;first release&quot;git push --tags     #推送tag到远端仓库删除taggit tag -d  0.1.0git push origin :refs/tags/0.1.0</code></pre><p>我在Github新建一个仓库，写了License，然后把本地一个写了很久仓库上传。<br>先pull，因为两个仓库不同，发现refusing to merge unrelated histories，无法pull<br>因为他们是两个不同的项目，要把两个不同的项目合并，git需要添加一句代码，在git pull，<br>这句代码是在git 2.9.2版本发生的，最新的版本需要添加–allow-unrelated-histories<br>git pull origin master –allow-unrelated-histories</p><p>#<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>具体实践过程中遇到的问题<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><p>###question1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原来的GWLogFramework 工程引用了mars.framework，没出现啥问题l；但是自己新建一个pod工程，将核心代码以及mars.framework移进去，报 #include&lt;limits&gt; file not found 错误</span><br><span class="line"></span><br><span class="line">解决： 经过2天的各种排查，百度、谷歌，没找到很相似的问题答案，尝试将GWMarsLogManager.m 改为 xxx.mm 成功跑起来了</span><br></pre></td></tr></table></figure><p>###question2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">对于私有pod 依赖于私有pod这种情况(比如：我们的GWNetworkFrameWork依赖于GWLogFramework)，有使用和检测两方面的注意点,</span><br><span class="line">1:使用 </span><br><span class="line">xxxx.podspec下直接应用</span><br><span class="line">#------------------文件分级------------------#</span><br><span class="line"></span><br><span class="line">#s.subspec &apos;Vendor&apos; do |ss|</span><br><span class="line">#ss.source_files = &apos;GWNetworkFramework/Classes/Vendor/**/*&apos;</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">s.subspec &apos;Core&apos; do |ss|</span><br><span class="line">#ss.dependency &apos;GWNetworkFramework/Vendor&apos;</span><br><span class="line">ss.source_files = &apos;GWNetworkFramework/Classes/Core/**/*&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.3&apos;</span><br><span class="line">s.dependency &apos;CocoaAsyncSocket&apos;</span><br><span class="line">s.dependency &apos;YYModel&apos;</span><br><span class="line">s.dependency &apos;YYCache&apos;</span><br><span class="line">s.dependency &apos;SocketRocket&apos;</span><br><span class="line">s.dependency &apos;GWLogFramework&apos;</span><br><span class="line">s.frameworks = &apos;UIKit&apos;, &apos;CFNetwork&apos;</span><br><span class="line"></span><br><span class="line">同时，新pod的example 工程的podfile顶部需引入2个source源</span><br><span class="line">2:检测</span><br><span class="line">注意: source1Url,source2Url,分别代表着cocoapods官方的仓库git地址以及自己的私有库git地址</span><br><span class="line">lint的时候使用 pod lib lint   --allow-warnings   --sources=&apos;source1Url,source2Url&apos;</span><br><span class="line">push的时候用 pod repo push GWSpec GWNetworkFramework.podspec   --sources=&apos;source1Url,source2Url&apos;</span><br></pre></td></tr></table></figure><p>#<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>参考文档 <strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Cocoapods 制作</span><br><span class="line">参考1： https://www.jianshu.com/p/d6a592d6fced</span><br><span class="line">参考2：https://www.jianshu.com/p/07f7854cd563</span><br><span class="line"></span><br><span class="line">Cocoapods制作-bundle制作及使用</span><br><span class="line">参考：https://www.jianshu.com/p/055906d5ae27</span><br><span class="line"></span><br><span class="line">Cocoapods framework制作</span><br><span class="line">参考: http://www.cnblogs.com/brycezhang/p/4117180.html</span><br><span class="line"></span><br><span class="line">Cocoapods podfile 相关介绍</span><br><span class="line">参考: https://www.jianshu.com/p/b8b889610b7e</span><br><span class="line"></span><br><span class="line">Cocoapods 制作中肯定遇到的问题</span><br><span class="line">参考：https://www.jianshu.com/p/1f56c3d78b52</span><br></pre></td></tr></table></figure><p>##2: cocoapods二进制packager 的使用</p><pre><code>eg: pod package GWNetworkFramework.podspec --force --embedded --no-mangle --exclude-deps --subspecs=Core  --spec-sources=http://gitlab.gowild.top/app/Eve_App_iOS_spec.git,https://github.com/CocoaPods/Specs.git参考:  https://www.zybuluo.com/qidiandasheng/note/595740</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Cocoapods 私有库方案说明:&lt;br&gt;    为了使我们的项目更好的管理、模块更好的复用与维护，&lt;br&gt;    经过研究决定采用 模块化配合Cocoapods的方案，以实现目的.&lt;/p&gt;
&lt;p&gt;##注意：&lt;br&gt;我们gowild-pod仓库 名字： gowild-a
      
    
    </summary>
    
    
      <category term="iOS" scheme="https://JohnyLisir.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://JohnyLisir.github.io/tags/iOS/"/>
    
      <category term="Cocoapods" scheme="https://JohnyLisir.github.io/tags/Cocoapods/"/>
    
  </entry>
  
</feed>
